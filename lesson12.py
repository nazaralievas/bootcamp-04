# до этого мы с вами в функциях использовали print для вывода результатов:
def ploshad_kruga(radius):
    print(3.14 * radius ** 2)

# и вызывали функицю таким образом:
ploshad_kruga(10)


# но для вывода результата чаще используется return:
def ploshad_kruga(radius):
    return 3.14 * radius ** 2

# и если ваша функция возвращает результат через return, то при вызове функции
# для того чтобы вывести всё в консоль нужно будет использовать print():
print(ploshad_kruga(10))


# return позволяет нам присваивать результат функций переменным:
krug1 = ploshad_kruga(10) # 314
krug2 = ploshad_kruga(12) # 452.16

# и давайте узнаем насколько площадь второго круга больше площади первого круга:
print(krug2 - krug1)

# это можно было бы записать и вот таким образом:
print(ploshad_kruga(12) - ploshad_kruga(10))

# такая запись может путать, но это то же самое что и:
lst1 = [1, 2, 3]
lst2 = [2, 5, 6]
print(max(lst1) - max(lst2))


# с return тоже можно использовать форматирование строк:
def ploshad_kruga(radius):
    return f"Площадь круга с радиусом {radius} = {3.14 * radius ** 2}"


# try except
# try позволяет нам ПРОБОВАТЬ что-то сделать, например есть два числа: a и b
# попробуем поделить a на b
# почему попробуем, потому что b может быть нулём, а на ноль делить нельзя
# поэтому мы попробуем поделить a на b в блоке try
a = 5
b = 0
try:
    a / b
except:
    print("На ноль делить нельзя")
# а в блоке except мы пишем то, что случится  если этого сделать не получилось, если столкнулись с ошибкой


# применим try except в нашей функции
def ploshad_kruga(radius):
    try: # ПОПРОБУЕМ возвести radius в степень и умножить на число Пи:
        result = 3.14 * radius ** 2
        return result 
    except: # если при вызове функции вместо числа ввели что-то другое, то мы пишем:
        return "В качестве радиуса можно вводить только числа"


print(ploshad_kruga('jdfnkjvn')) # В качестве радиуса можно вводить только числа
print(ploshad_kruga(10)) # 314.0